//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClient.客户端五福 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="对象一", Namespace="http://schemas.datacontract.org/2004/07/WCFServer.%E5%8F%82%E6%95%B0")]
    [System.SerializableAttribute()]
    public partial class 对象一 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SexField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sex {
            get {
                return this.SexField;
            }
            set {
                if ((object.ReferenceEquals(this.SexField, value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="空间1", ConfigurationName="客户端五福.I服务1")]
    public interface I服务1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="空间1/I服务1/服务1方法1", ReplyAction="空间1/I服务1/服务1方法1Response")]
        string 服务1方法1(ConsoleClient.客户端五福.对象一 one);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="空间1/I服务1/服务1方法1", ReplyAction="空间1/I服务1/服务1方法1Response")]
        System.IAsyncResult Begin服务1方法1(ConsoleClient.客户端五福.对象一 one, System.AsyncCallback callback, object asyncState);
        
        string End服务1方法1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="空间1/I服务1/服务1方法2", ReplyAction="空间1/I服务1/服务1方法2Response")]
        string 服务1方法2();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="空间1/I服务1/服务1方法2", ReplyAction="空间1/I服务1/服务1方法2Response")]
        System.IAsyncResult Begin服务1方法2(System.AsyncCallback callback, object asyncState);
        
        string End服务1方法2(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface I服务1Channel : ConsoleClient.客户端五福.I服务1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 服务1方法1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 服务1方法1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 服务1方法2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 服务1方法2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class I服务1Client : System.ServiceModel.ClientBase<ConsoleClient.客户端五福.I服务1>, ConsoleClient.客户端五福.I服务1 {
        
        private BeginOperationDelegate onBegin服务1方法1Delegate;
        
        private EndOperationDelegate onEnd服务1方法1Delegate;
        
        private System.Threading.SendOrPostCallback on服务1方法1CompletedDelegate;
        
        private BeginOperationDelegate onBegin服务1方法2Delegate;
        
        private EndOperationDelegate onEnd服务1方法2Delegate;
        
        private System.Threading.SendOrPostCallback on服务1方法2CompletedDelegate;
        
        public I服务1Client() {
        }
        
        public I服务1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public I服务1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public I服务1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public I服务1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<服务1方法1CompletedEventArgs> 服务1方法1Completed;
        
        public event System.EventHandler<服务1方法2CompletedEventArgs> 服务1方法2Completed;
        
        public string 服务1方法1(ConsoleClient.客户端五福.对象一 one) {
            return base.Channel.服务1方法1(one);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Begin服务1方法1(ConsoleClient.客户端五福.对象一 one, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin服务1方法1(one, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string End服务1方法1(System.IAsyncResult result) {
            return base.Channel.End服务1方法1(result);
        }
        
        private System.IAsyncResult OnBegin服务1方法1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ConsoleClient.客户端五福.对象一 one = ((ConsoleClient.客户端五福.对象一)(inValues[0]));
            return this.Begin服务1方法1(one, callback, asyncState);
        }
        
        private object[] OnEnd服务1方法1(System.IAsyncResult result) {
            string retVal = this.End服务1方法1(result);
            return new object[] {
                    retVal};
        }
        
        private void On服务1方法1Completed(object state) {
            if ((this.服务1方法1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.服务1方法1Completed(this, new 服务1方法1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 服务1方法1Async(ConsoleClient.客户端五福.对象一 one) {
            this.服务1方法1Async(one, null);
        }
        
        public void 服务1方法1Async(ConsoleClient.客户端五福.对象一 one, object userState) {
            if ((this.onBegin服务1方法1Delegate == null)) {
                this.onBegin服务1方法1Delegate = new BeginOperationDelegate(this.OnBegin服务1方法1);
            }
            if ((this.onEnd服务1方法1Delegate == null)) {
                this.onEnd服务1方法1Delegate = new EndOperationDelegate(this.OnEnd服务1方法1);
            }
            if ((this.on服务1方法1CompletedDelegate == null)) {
                this.on服务1方法1CompletedDelegate = new System.Threading.SendOrPostCallback(this.On服务1方法1Completed);
            }
            base.InvokeAsync(this.onBegin服务1方法1Delegate, new object[] {
                        one}, this.onEnd服务1方法1Delegate, this.on服务1方法1CompletedDelegate, userState);
        }
        
        public string 服务1方法2() {
            return base.Channel.服务1方法2();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Begin服务1方法2(System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin服务1方法2(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string End服务1方法2(System.IAsyncResult result) {
            return base.Channel.End服务1方法2(result);
        }
        
        private System.IAsyncResult OnBegin服务1方法2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.Begin服务1方法2(callback, asyncState);
        }
        
        private object[] OnEnd服务1方法2(System.IAsyncResult result) {
            string retVal = this.End服务1方法2(result);
            return new object[] {
                    retVal};
        }
        
        private void On服务1方法2Completed(object state) {
            if ((this.服务1方法2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.服务1方法2Completed(this, new 服务1方法2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 服务1方法2Async() {
            this.服务1方法2Async(null);
        }
        
        public void 服务1方法2Async(object userState) {
            if ((this.onBegin服务1方法2Delegate == null)) {
                this.onBegin服务1方法2Delegate = new BeginOperationDelegate(this.OnBegin服务1方法2);
            }
            if ((this.onEnd服务1方法2Delegate == null)) {
                this.onEnd服务1方法2Delegate = new EndOperationDelegate(this.OnEnd服务1方法2);
            }
            if ((this.on服务1方法2CompletedDelegate == null)) {
                this.on服务1方法2CompletedDelegate = new System.Threading.SendOrPostCallback(this.On服务1方法2Completed);
            }
            base.InvokeAsync(this.onBegin服务1方法2Delegate, null, this.onEnd服务1方法2Delegate, this.on服务1方法2CompletedDelegate, userState);
        }
    }
}
