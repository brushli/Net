//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2013/8/2 17:13:38
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using WcfStatistics.Model;
using WcfStatistics.Dao.Int;

namespace WcfStatistics.Dao.Imp {
	
    /// <summary><c>BatchDao</c> is the implementation of <see cref="IBatchDao"/>.</summary>
    public partial class BatchDao : BaseDao, IBatchDao {

		/// <summary>Implements <see cref="IBatchDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "Batch-GetCount";
			int result = Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

		/// <summary>Implements <see cref="IBatchDao.Find"/></summary>
		public Batch Find(Int32 iD) {
			String stmtId = "Batch-Find";
			Batch result = Instance.QueryForObject<Batch>(stmtId, iD);
			return result;
		}

		/// <summary>Implements <see cref="IBatchDao.FindAll"/></summary>
		public IList<Batch> FindAll() {
			String stmtId = "Batch-FindAll";
			IList<Batch> result = Instance.QueryForList<Batch>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IBatchDao.QuickFindAll"/></summary>
		public IList<Batch> QuickFindAll() {
			String stmtId = "Batch-QuickFindAll";
			IList<Batch> result = Instance.QueryForList<Batch>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IBatchDao.FindByCreateTime"/></summary>
		public IList<Batch> FindByCreateTime(DateTime? createTime) {
			String stmtId = "Batch-FindByCreateTime";
			IList<Batch> result = Instance.QueryForList<Batch>(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IBatchDao.Insert"/></summary>
		public int Insert(Batch obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "Batch-Insert";
			int id = (int)Instance.Insert(stmtId, obj);

            return id;
		}
		
		/// <summary>Implements <see cref="IBatchDao.Update"/></summary>
		public void Update(Batch obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "Batch-Update";
			Instance.Update(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IBatchDao.Delete"/></summary>
		public void Delete(Batch obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "Batch-Delete";
			Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IBatchDao.DeleteByCreateTime"/></summary>
		public int DeleteByCreateTime(DateTime? createTime) {
			String stmtId = "Batch-DeleteByCreateTime";
			int result = Instance.Delete(stmtId, createTime);
			return result;
		}
		
		/// <summary>Implements <see cref="IBatchDao.Reload"/></summary>
		public void Reload(Batch obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "Batch-Find";
			Instance.QueryForObject<Batch>(stmtId, obj, obj);
		}
		
	}

}
