//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2013/8/2 17:13:38
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using WcfStatistics.Model;
using WcfStatistics.Dao.Int;

namespace WcfStatistics.Dao.Imp {
	
    /// <summary><c>WcfServerPerformanceDao</c> is the implementation of <see cref="IWcfServerPerformanceDao"/>.</summary>
    public partial class WcfServerPerformanceDao : BaseDao, IWcfServerPerformanceDao {

		/// <summary>Implements <see cref="IWcfServerPerformanceDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "WcfServerPerformance-GetCount";
			int result = Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

		/// <summary>Implements <see cref="IWcfServerPerformanceDao.Find"/></summary>
		public WcfServerPerformance Find(Int64 iD) {
			String stmtId = "WcfServerPerformance-Find";
			WcfServerPerformance result = Instance.QueryForObject<WcfServerPerformance>(stmtId, iD);
			return result;
		}

		/// <summary>Implements <see cref="IWcfServerPerformanceDao.FindAll"/></summary>
		public IList<WcfServerPerformance> FindAll() {
			String stmtId = "WcfServerPerformance-FindAll";
			IList<WcfServerPerformance> result = Instance.QueryForList<WcfServerPerformance>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.QuickFindAll"/></summary>
		public IList<WcfServerPerformance> QuickFindAll() {
			String stmtId = "WcfServerPerformance-QuickFindAll";
			IList<WcfServerPerformance> result = Instance.QueryForList<WcfServerPerformance>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.FindByServerID"/></summary>
		public IList<WcfServerPerformance> FindByServerID(Int32? serverID) {
			String stmtId = "WcfServerPerformance-FindByServerID";
			IList<WcfServerPerformance> result = Instance.QueryForList<WcfServerPerformance>(stmtId, serverID);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.FindByBatchID"/></summary>
		public IList<WcfServerPerformance> FindByBatchID(Int32? batchID) {
			String stmtId = "WcfServerPerformance-FindByBatchID";
			IList<WcfServerPerformance> result = Instance.QueryForList<WcfServerPerformance>(stmtId, batchID);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.FindByCurrentConnNums"/></summary>
		public IList<WcfServerPerformance> FindByCurrentConnNums(Int32? currentConnNums) {
			String stmtId = "WcfServerPerformance-FindByCurrentConnNums";
			IList<WcfServerPerformance> result = Instance.QueryForList<WcfServerPerformance>(stmtId, currentConnNums);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.FindByProcessId"/></summary>
		public IList<WcfServerPerformance> FindByProcessId(Int32? processId) {
			String stmtId = "WcfServerPerformance-FindByProcessId";
			IList<WcfServerPerformance> result = Instance.QueryForList<WcfServerPerformance>(stmtId, processId);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.FindByCpu"/></summary>
		public IList<WcfServerPerformance> FindByCpu(Decimal? cpu) {
			String stmtId = "WcfServerPerformance-FindByCpu";
			IList<WcfServerPerformance> result = Instance.QueryForList<WcfServerPerformance>(stmtId, cpu);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.FindByMem"/></summary>
		public IList<WcfServerPerformance> FindByMem(Decimal? mem) {
			String stmtId = "WcfServerPerformance-FindByMem";
			IList<WcfServerPerformance> result = Instance.QueryForList<WcfServerPerformance>(stmtId, mem);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.FindByAllMem"/></summary>
		public IList<WcfServerPerformance> FindByAllMem(Decimal? allMem) {
			String stmtId = "WcfServerPerformance-FindByAllMem";
			IList<WcfServerPerformance> result = Instance.QueryForList<WcfServerPerformance>(stmtId, allMem);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.FindByThreadCount"/></summary>
		public IList<WcfServerPerformance> FindByThreadCount(Int32? threadCount) {
			String stmtId = "WcfServerPerformance-FindByThreadCount";
			IList<WcfServerPerformance> result = Instance.QueryForList<WcfServerPerformance>(stmtId, threadCount);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.Insert"/></summary>
		public void Insert(WcfServerPerformance obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "WcfServerPerformance-Insert";
			Instance.Insert(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.Update"/></summary>
		public void Update(WcfServerPerformance obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "WcfServerPerformance-Update";
			Instance.Update(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.Delete"/></summary>
		public void Delete(WcfServerPerformance obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "WcfServerPerformance-Delete";
			Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.DeleteByServerID"/></summary>
		public int DeleteByServerID(Int32? serverID) {
			String stmtId = "WcfServerPerformance-DeleteByServerID";
			int result = Instance.Delete(stmtId, serverID);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.DeleteByBatchID"/></summary>
		public int DeleteByBatchID(Int32? batchID) {
			String stmtId = "WcfServerPerformance-DeleteByBatchID";
			int result = Instance.Delete(stmtId, batchID);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.DeleteByCurrentConnNums"/></summary>
		public int DeleteByCurrentConnNums(Int32? currentConnNums) {
			String stmtId = "WcfServerPerformance-DeleteByCurrentConnNums";
			int result = Instance.Delete(stmtId, currentConnNums);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.DeleteByProcessId"/></summary>
		public int DeleteByProcessId(Int32? processId) {
			String stmtId = "WcfServerPerformance-DeleteByProcessId";
			int result = Instance.Delete(stmtId, processId);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.DeleteByCpu"/></summary>
		public int DeleteByCpu(Decimal? cpu) {
			String stmtId = "WcfServerPerformance-DeleteByCpu";
			int result = Instance.Delete(stmtId, cpu);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.DeleteByMem"/></summary>
		public int DeleteByMem(Decimal? mem) {
			String stmtId = "WcfServerPerformance-DeleteByMem";
			int result = Instance.Delete(stmtId, mem);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.DeleteByAllMem"/></summary>
		public int DeleteByAllMem(Decimal? allMem) {
			String stmtId = "WcfServerPerformance-DeleteByAllMem";
			int result = Instance.Delete(stmtId, allMem);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.DeleteByThreadCount"/></summary>
		public int DeleteByThreadCount(Int32? threadCount) {
			String stmtId = "WcfServerPerformance-DeleteByThreadCount";
			int result = Instance.Delete(stmtId, threadCount);
			return result;
		}
		
		/// <summary>Implements <see cref="IWcfServerPerformanceDao.Reload"/></summary>
		public void Reload(WcfServerPerformance obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "WcfServerPerformance-Find";
			Instance.QueryForObject<WcfServerPerformance>(stmtId, obj, obj);
		}
		
	}

}
