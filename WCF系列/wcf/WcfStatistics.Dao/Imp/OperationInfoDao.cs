//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoImpl.cst at 2013/8/2 17:13:38
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
using WcfStatistics.Model;
using WcfStatistics.Dao.Int;

namespace WcfStatistics.Dao.Imp {
	
    /// <summary><c>OperationInfoDao</c> is the implementation of <see cref="IOperationInfoDao"/>.</summary>
    public partial class OperationInfoDao : BaseDao, IOperationInfoDao {

		/// <summary>Implements <see cref="IOperationInfoDao.GetCount"/></summary>
		public int GetCount() {
			String stmtId = "OperationInfo-GetCount";
			int result = Instance.QueryForObject<int>(stmtId, null);
			return result;
		}

		/// <summary>Implements <see cref="IOperationInfoDao.Find"/></summary>
		public OperationInfo Find(Int64 iD) {
			String stmtId = "OperationInfo-Find";
			OperationInfo result = Instance.QueryForObject<OperationInfo>(stmtId, iD);
			return result;
		}

		/// <summary>Implements <see cref="IOperationInfoDao.FindAll"/></summary>
		public IList<OperationInfo> FindAll() {
			String stmtId = "OperationInfo-FindAll";
			IList<OperationInfo> result = Instance.QueryForList<OperationInfo>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.QuickFindAll"/></summary>
		public IList<OperationInfo> QuickFindAll() {
			String stmtId = "OperationInfo-QuickFindAll";
			IList<OperationInfo> result = Instance.QueryForList<OperationInfo>(stmtId, null);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.FindByServerID"/></summary>
		public IList<OperationInfo> FindByServerID(Int32? serverID) {
			String stmtId = "OperationInfo-FindByServerID";
			IList<OperationInfo> result = Instance.QueryForList<OperationInfo>(stmtId, serverID);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.FindByBatchID"/></summary>
		public IList<OperationInfo> FindByBatchID(Int32? batchID) {
			String stmtId = "OperationInfo-FindByBatchID";
			IList<OperationInfo> result = Instance.QueryForList<OperationInfo>(stmtId, batchID);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.FindByIP"/></summary>
		public IList<OperationInfo> FindByIP(String iP) {
			String stmtId = "OperationInfo-FindByIP";
			IList<OperationInfo> result = Instance.QueryForList<OperationInfo>(stmtId, iP);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.FindByAdress"/></summary>
		public IList<OperationInfo> FindByAdress(String adress) {
			String stmtId = "OperationInfo-FindByAdress";
			IList<OperationInfo> result = Instance.QueryForList<OperationInfo>(stmtId, adress);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.FindByOperationName"/></summary>
		public IList<OperationInfo> FindByOperationName(String operationName) {
			String stmtId = "OperationInfo-FindByOperationName";
			IList<OperationInfo> result = Instance.QueryForList<OperationInfo>(stmtId, operationName);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.FindByOperationNums"/></summary>
		public IList<OperationInfo> FindByOperationNums(Int64? operationNums) {
			String stmtId = "OperationInfo-FindByOperationNums";
			IList<OperationInfo> result = Instance.QueryForList<OperationInfo>(stmtId, operationNums);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.Insert"/></summary>
		public void Insert(OperationInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "OperationInfo-Insert";
			Instance.Insert(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.Update"/></summary>
		public void Update(OperationInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "OperationInfo-Update";
			Instance.Update(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.Delete"/></summary>
		public void Delete(OperationInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "OperationInfo-Delete";
			Instance.Delete(stmtId, obj);
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.DeleteByServerID"/></summary>
		public int DeleteByServerID(Int32? serverID) {
			String stmtId = "OperationInfo-DeleteByServerID";
			int result = Instance.Delete(stmtId, serverID);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.DeleteByBatchID"/></summary>
		public int DeleteByBatchID(Int32? batchID) {
			String stmtId = "OperationInfo-DeleteByBatchID";
			int result = Instance.Delete(stmtId, batchID);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.DeleteByIP"/></summary>
		public int DeleteByIP(String iP) {
			String stmtId = "OperationInfo-DeleteByIP";
			int result = Instance.Delete(stmtId, iP);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.DeleteByAdress"/></summary>
		public int DeleteByAdress(String adress) {
			String stmtId = "OperationInfo-DeleteByAdress";
			int result = Instance.Delete(stmtId, adress);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.DeleteByOperationName"/></summary>
		public int DeleteByOperationName(String operationName) {
			String stmtId = "OperationInfo-DeleteByOperationName";
			int result = Instance.Delete(stmtId, operationName);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.DeleteByOperationNums"/></summary>
		public int DeleteByOperationNums(Int64? operationNums) {
			String stmtId = "OperationInfo-DeleteByOperationNums";
			int result = Instance.Delete(stmtId, operationNums);
			return result;
		}
		
		/// <summary>Implements <see cref="IOperationInfoDao.Reload"/></summary>
		public void Reload(OperationInfo obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "OperationInfo-Find";
			Instance.QueryForObject<OperationInfo>(stmtId, obj, obj);
		}
		
	}

}
