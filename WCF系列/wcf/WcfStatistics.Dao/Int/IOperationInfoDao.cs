//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoIntf.cst at 2013/8/2 17:13:38
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;

using WcfStatistics.Model;

namespace WcfStatistics.Dao.Int {
	
    /// <summary><c>IOperationInfoDao</c> is the DAO interface for <see cref="WcfStatistics.Model.OperationInfo"/>.</summary>
    public partial interface IOperationInfoDao {        

		/// <summary>Returns the total count of objects.</summary>
		int GetCount();

		/// <summary>Finds a <see cref="OperationInfo"/> instance by the primary key value.</summary>
		OperationInfo Find(Int64 iD);

		/// <summary>Finds all OperationInfo instances.</summary>
		IList<OperationInfo> FindAll();
		
		/// <summary>Finds all OperationInfo instances without Lob columns loaded.</summary>
		IList<OperationInfo> QuickFindAll();
		
		/// <summary>Finds OperationInfo instances by ServerID value.</summary>
		IList<OperationInfo> FindByServerID(Int32? serverID);
		
		/// <summary>Finds OperationInfo instances by BatchID value.</summary>
		IList<OperationInfo> FindByBatchID(Int32? batchID);
		
		/// <summary>Finds OperationInfo instances by IP value.</summary>
		IList<OperationInfo> FindByIP(String iP);
		
		/// <summary>Finds OperationInfo instances by Adress value.</summary>
		IList<OperationInfo> FindByAdress(String adress);
		
		/// <summary>Finds OperationInfo instances by OperationName value.</summary>
		IList<OperationInfo> FindByOperationName(String operationName);
		
		/// <summary>Finds OperationInfo instances by OperationNums value.</summary>
		IList<OperationInfo> FindByOperationNums(Int64? operationNums);
		
		/// <summary>Inserts a new OperationInfo instance into underlying database table.</summary>
		void Insert(OperationInfo obj);
		
		/// <summary>Update the underlying database record of a OperationInfo instance.</summary>
		void Update(OperationInfo obj);
		
		/// <summary>Delete the underlying database record of a OperationInfo instance.</summary>
		void Delete(OperationInfo obj);
		
        /// <summary>Deletes <see cref="OperationInfo"/> instances by <see cref="OperationInfo.ServerID"/>.</summary>
		int DeleteByServerID(Int32? serverID);
		
        /// <summary>Deletes <see cref="OperationInfo"/> instances by <see cref="OperationInfo.BatchID"/>.</summary>
		int DeleteByBatchID(Int32? batchID);
		
        /// <summary>Deletes <see cref="OperationInfo"/> instances by <see cref="OperationInfo.IP"/>.</summary>
		int DeleteByIP(String iP);
		
        /// <summary>Deletes <see cref="OperationInfo"/> instances by <see cref="OperationInfo.Adress"/>.</summary>
		int DeleteByAdress(String adress);
		
        /// <summary>Deletes <see cref="OperationInfo"/> instances by <see cref="OperationInfo.OperationName"/>.</summary>
		int DeleteByOperationName(String operationName);
		
        /// <summary>Deletes <see cref="OperationInfo"/> instances by <see cref="OperationInfo.OperationNums"/>.</summary>
		int DeleteByOperationNums(Int64? operationNums);
		
		/// <summary>Reload the underlying database record of a OperationInfo instance.</summary>
		void Reload(OperationInfo obj);
		
	}

}
