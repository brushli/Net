//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoIntf.cst at 2013/8/2 17:13:38
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;

using WcfStatistics.Model;

namespace WcfStatistics.Dao.Int {
	
    /// <summary><c>IClientConnInfoDao</c> is the DAO interface for <see cref="WcfStatistics.Model.ClientConnInfo"/>.</summary>
    public partial interface IClientConnInfoDao {        

		/// <summary>Returns the total count of objects.</summary>
		int GetCount();

		/// <summary>Finds a <see cref="ClientConnInfo"/> instance by the primary key value.</summary>
		ClientConnInfo Find(Int64 iD);

		/// <summary>Finds all ClientConnInfo instances.</summary>
		IList<ClientConnInfo> FindAll();
		
		/// <summary>Finds all ClientConnInfo instances without Lob columns loaded.</summary>
		IList<ClientConnInfo> QuickFindAll();
		
		/// <summary>Finds ClientConnInfo instances by ServerID value.</summary>
		IList<ClientConnInfo> FindByServerID(Int32? serverID);
		
		/// <summary>Finds ClientConnInfo instances by BatchID value.</summary>
		IList<ClientConnInfo> FindByBatchID(Int32? batchID);
		
		/// <summary>Finds ClientConnInfo instances by IP value.</summary>
		IList<ClientConnInfo> FindByIP(String iP);
		
		/// <summary>Finds ClientConnInfo instances by Adress value.</summary>
		IList<ClientConnInfo> FindByAdress(String adress);
		
		/// <summary>Finds ClientConnInfo instances by LinkNums value.</summary>
		IList<ClientConnInfo> FindByLinkNums(Int32? linkNums);
		
		/// <summary>Inserts a new ClientConnInfo instance into underlying database table.</summary>
		void Insert(ClientConnInfo obj);
		
		/// <summary>Update the underlying database record of a ClientConnInfo instance.</summary>
		void Update(ClientConnInfo obj);
		
		/// <summary>Delete the underlying database record of a ClientConnInfo instance.</summary>
		void Delete(ClientConnInfo obj);
		
        /// <summary>Deletes <see cref="ClientConnInfo"/> instances by <see cref="ClientConnInfo.ServerID"/>.</summary>
		int DeleteByServerID(Int32? serverID);
		
        /// <summary>Deletes <see cref="ClientConnInfo"/> instances by <see cref="ClientConnInfo.BatchID"/>.</summary>
		int DeleteByBatchID(Int32? batchID);
		
        /// <summary>Deletes <see cref="ClientConnInfo"/> instances by <see cref="ClientConnInfo.IP"/>.</summary>
		int DeleteByIP(String iP);
		
        /// <summary>Deletes <see cref="ClientConnInfo"/> instances by <see cref="ClientConnInfo.Adress"/>.</summary>
		int DeleteByAdress(String adress);
		
        /// <summary>Deletes <see cref="ClientConnInfo"/> instances by <see cref="ClientConnInfo.LinkNums"/>.</summary>
		int DeleteByLinkNums(Int32? linkNums);
		
		/// <summary>Reload the underlying database record of a ClientConnInfo instance.</summary>
		void Reload(ClientConnInfo obj);
		
	}

}
