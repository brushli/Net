//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.DaoIntf.cst at 2013/8/2 17:13:38
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;

using WcfStatistics.Model;

namespace WcfStatistics.Dao.Int {
	
    /// <summary><c>IWcfServerPerformanceDao</c> is the DAO interface for <see cref="WcfStatistics.Model.WcfServerPerformance"/>.</summary>
    public partial interface IWcfServerPerformanceDao {        

		/// <summary>Returns the total count of objects.</summary>
		int GetCount();

		/// <summary>Finds a <see cref="WcfServerPerformance"/> instance by the primary key value.</summary>
		WcfServerPerformance Find(Int64 iD);

		/// <summary>Finds all WcfServerPerformance instances.</summary>
		IList<WcfServerPerformance> FindAll();
		
		/// <summary>Finds all WcfServerPerformance instances without Lob columns loaded.</summary>
		IList<WcfServerPerformance> QuickFindAll();
		
		/// <summary>Finds WcfServerPerformance instances by ServerID value.</summary>
		IList<WcfServerPerformance> FindByServerID(Int32? serverID);
		
		/// <summary>Finds WcfServerPerformance instances by BatchID value.</summary>
		IList<WcfServerPerformance> FindByBatchID(Int32? batchID);
		
		/// <summary>Finds WcfServerPerformance instances by CurrentConnNums value.</summary>
		IList<WcfServerPerformance> FindByCurrentConnNums(Int32? currentConnNums);
		
		/// <summary>Finds WcfServerPerformance instances by ProcessId value.</summary>
		IList<WcfServerPerformance> FindByProcessId(Int32? processId);
		
		/// <summary>Finds WcfServerPerformance instances by Cpu value.</summary>
		IList<WcfServerPerformance> FindByCpu(Decimal? cpu);
		
		/// <summary>Finds WcfServerPerformance instances by Mem value.</summary>
		IList<WcfServerPerformance> FindByMem(Decimal? mem);
		
		/// <summary>Finds WcfServerPerformance instances by AllMem value.</summary>
		IList<WcfServerPerformance> FindByAllMem(Decimal? allMem);
		
		/// <summary>Finds WcfServerPerformance instances by ThreadCount value.</summary>
		IList<WcfServerPerformance> FindByThreadCount(Int32? threadCount);
		
		/// <summary>Inserts a new WcfServerPerformance instance into underlying database table.</summary>
		void Insert(WcfServerPerformance obj);
		
		/// <summary>Update the underlying database record of a WcfServerPerformance instance.</summary>
		void Update(WcfServerPerformance obj);
		
		/// <summary>Delete the underlying database record of a WcfServerPerformance instance.</summary>
		void Delete(WcfServerPerformance obj);
		
        /// <summary>Deletes <see cref="WcfServerPerformance"/> instances by <see cref="WcfServerPerformance.ServerID"/>.</summary>
		int DeleteByServerID(Int32? serverID);
		
        /// <summary>Deletes <see cref="WcfServerPerformance"/> instances by <see cref="WcfServerPerformance.BatchID"/>.</summary>
		int DeleteByBatchID(Int32? batchID);
		
        /// <summary>Deletes <see cref="WcfServerPerformance"/> instances by <see cref="WcfServerPerformance.CurrentConnNums"/>.</summary>
		int DeleteByCurrentConnNums(Int32? currentConnNums);
		
        /// <summary>Deletes <see cref="WcfServerPerformance"/> instances by <see cref="WcfServerPerformance.ProcessId"/>.</summary>
		int DeleteByProcessId(Int32? processId);
		
        /// <summary>Deletes <see cref="WcfServerPerformance"/> instances by <see cref="WcfServerPerformance.Cpu"/>.</summary>
		int DeleteByCpu(Decimal? cpu);
		
        /// <summary>Deletes <see cref="WcfServerPerformance"/> instances by <see cref="WcfServerPerformance.Mem"/>.</summary>
		int DeleteByMem(Decimal? mem);
		
        /// <summary>Deletes <see cref="WcfServerPerformance"/> instances by <see cref="WcfServerPerformance.AllMem"/>.</summary>
		int DeleteByAllMem(Decimal? allMem);
		
        /// <summary>Deletes <see cref="WcfServerPerformance"/> instances by <see cref="WcfServerPerformance.ThreadCount"/>.</summary>
		int DeleteByThreadCount(Int32? threadCount);
		
		/// <summary>Reload the underlying database record of a WcfServerPerformance instance.</summary>
		void Reload(WcfServerPerformance obj);
		
	}

}
