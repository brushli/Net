<%@ CodeTemplate ResponseEncoding="UTF-8" Language="C#" TargetLanguage=“C#" Description="Generates a class including a special informational header" Debug="False" %>
<!-- #include file="../../Comm/Inc/BaseProperty.inc" -->
<!-- #include file="../../Comm/Inc/SourceTable.inc" -->
<!-- #include file="../../Comm/Inc/ImportAssembly.inc" -->
<!-- #include file="../../Comm/Code/CommonUtility.cs" -->
<!-- #include file="../../Comm/Code/Function.cs" -->
import {Store,Module,ActionContext} from 'vuex'
import ListModule from './list-module'
import ListState from './list-state'
import <%=BaseClassName%> from '../entities/<%=BaseClassName.ToLower()%>'
import Ajax from '../../lib/ajax'
import PageResult from '@/store/entities/page-result';
import ListMutations from './list-mutations'

interface <%=BaseClassName%>State extends ListState<<%=BaseClassName%>>{
    edit<%=BaseClassName%>:<%=BaseClassName%>
    isEdit:boolean
}
class <%=BaseClassName%>Mutations extends ListMutations<<%=BaseClassName%>>{

}
class <%=BaseClassName%>Module extends ListModule<<%=BaseClassName%>State,any,<%=BaseClassName%>>{
    state={
        totalCount:0,
        currentPage:1,
        pageSize:10,
        list: new Array<<%=BaseClassName%>>(),
        loading:false,
        isEdit:false,
        edit<%=BaseClassName%>:new <%=BaseClassName%>()
    }
    actions={
        async getAll(context:ActionContext<<%=BaseClassName%>State,any>,payload:any){
            context.state.loading=true;
            let reponse=await Ajax.get('/api/services/app/<%=BaseClassName%>/GetAll',{params:payload.data});
            context.state.loading=false;
            let page=reponse.data.result as PageResult<<%=BaseClassName%>>;
            context.state.totalCount=page.totalCount;
            context.state.list=page.items;
        },
        async create(context:ActionContext<<%=BaseClassName%>State,any>,payload:any){
            await Ajax.post('/api/services/app/<%=BaseClassName%>/Create',payload.data);
        },
        async update(context:ActionContext<<%=BaseClassName%>State,any>,payload:any){
            await Ajax.put('/api/services/app/<%=BaseClassName%>/Update',payload.data);
        },
        async delete(context:ActionContext<<%=BaseClassName%>State,any>,payload:any){
            await Ajax.delete('/api/services/app/<%=BaseClassName%>/Delete?Id='+payload.data.id);
        },        
        async get(context:ActionContext<<%=BaseClassName%>State,any>,payload:any){
            let reponse=await Ajax.get('/api/services/app/<%=BaseClassName%>/Get?Id='+payload.id);         
            return reponse.data.result as <%=BaseClassName%>;
        }
    };
    mutations={
        setCurrentPage(state:<%=BaseClassName%>State,page:number){
            state.currentPage=page;
        },
        setPageSize(state:<%=BaseClassName%>State,pagesize:number){
            state.pageSize=pagesize;
        },
        edit(state:<%=BaseClassName%>State,<%=StringUtil.ToCamelCase(BaseClassName)%>:<%=BaseClassName%>){
            state.isEdit=true;
            state.edit<%=BaseClassName%>=<%=StringUtil.ToCamelCase(BaseClassName)%>;
        }
    }
}
const <%=StringUtil.ToCamelCase(BaseClassName)%>Module=new <%=BaseClassName%>Module();
export default <%=StringUtil.ToCamelCase(BaseClassName)%>Module;